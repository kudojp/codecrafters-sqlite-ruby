#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

Dir[File.join(File.dirname(__FILE__), "ast/*.rb")].each {|file| require file }

module SimplestSqlParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 56)
# innerの内容はそのまま生成されたparser.tab.rbファイル内のParserクラス内でmodule_evalされる。
# ref. https://i.loveruby.net/ja/projects/racc/doc/parser.html#Racc%3a%3aParser-yyparse

def initialize(query)
  @scanner = SimplestSqlParser::LexicalScanner.new
  @scanner.scan_setup(query)
end

# #next_token はここで必ず実装する必要がある。
def next_token
  @scanner.next_token
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    12,    13,    11,    12,    13,    11,    12,    13,    11,
    12,    13,     3,     4,     6,    14,    16,    19,    20,    21,
    29,    30,    32 ]

racc_action_check = [
     3,     3,     3,    16,    16,    16,    20,    20,    20,    21,
    21,    21,     0,     1,     2,     4,     5,     6,     7,    13,
    24,    26,    29 ]

racc_action_pointer = [
    10,    13,     5,    -4,    15,     6,    13,    15,   nil,   nil,
   nil,   nil,   nil,    12,   nil,   nil,    -1,   nil,   nil,   nil,
     2,     5,   nil,   nil,     9,   nil,    13,   nil,   nil,    18,
   nil,   nil,   nil ]

racc_action_default = [
   -21,   -21,    -1,   -21,   -21,    -2,   -21,    -4,    -5,    -7,
    -8,    -9,   -10,   -21,    33,    -3,   -21,   -14,   -15,   -16,
   -21,   -21,   -17,   -18,   -21,    -6,   -21,   -12,   -13,   -21,
   -11,   -19,   -20 ]

racc_goto_table = [
     8,     1,     2,     5,    15,     7,    27,    28,    26,    17,
    18,    22,    23,    24,    31,   nil,   nil,    25 ]

racc_goto_check = [
     6,     1,     2,     3,     4,     5,     7,     8,     9,    10,
    11,    12,    13,     6,    14,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     1,     2,     1,    -1,     2,    -3,   -15,   -14,   -13,
     3,     4,    -5,    -4,   -15 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,    10,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_1,
  2, 13, :_reduce_2,
  3, 13, :_reduce_3,
  2, 14, :_reduce_4,
  1, 17, :_reduce_5,
  3, 17, :_reduce_6,
  1, 18, :_reduce_7,
  1, 18, :_reduce_8,
  1, 19, :_reduce_9,
  1, 19, :_reduce_10,
  4, 20, :_reduce_11,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  2, 15, :_reduce_14,
  1, 22, :_reduce_15,
  1, 23, :_reduce_16,
  2, 16, :_reduce_17,
  1, 24, :_reduce_18,
  3, 25, :_reduce_19,
  1, 26, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 33

racc_token_table = {
  false => 0,
  :error => 1,
  :SELECT => 2,
  :COMMA => 3,
  :IDENTIFIER => 4,
  :ASTERISK => 5,
  :COUNT => 6,
  :PARENTHESIS_LEFT => 7,
  :PARENTHESIS_RIGHT => 8,
  :FROM => 9,
  :WHERE => 10,
  :EQUALS => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "SELECT",
  "COMMA",
  "IDENTIFIER",
  "ASTERISK",
  "COUNT",
  "PARENTHESIS_LEFT",
  "PARENTHESIS_RIGHT",
  "FROM",
  "WHERE",
  "EQUALS",
  "$start",
  "query",
  "select_clause",
  "from_clause",
  "where_clause",
  "selected_columns",
  "selected_column",
  "column_node",
  "function_node",
  "arg_node",
  "from_table",
  "table",
  "predicate",
  "condition",
  "expression" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 12)
  def _reduce_1(val, _values, result)
    result = AST::QueryNode.new(select_clause: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_2(val, _values, result)
    result = AST::QueryNode.new(select_clause: val[0], from_clause: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 14)
  def _reduce_3(val, _values, result)
    result = AST::QueryNode.new(select_clause: val[0], from_clause: val[1], where_clause: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 16)
  def _reduce_4(val, _values, result)
     result = AST::SelectClauseNode.new(selected_columns: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_6(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_7(val, _values, result)
     result = AST::SelectedColumnNode.new(col_def: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = AST::SelectedColumnNode.new(col_def: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_9(val, _values, result)
     result = AST::ColumnNode.new(type: :single_col, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_10(val, _values, result)
     result = AST::ColumnNode.new(type: :asterisk, name: nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = AST::FunctionNode.new(type: :count, args: [val[2]])
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_14(val, _values, result)
     result = AST::FromClauseNode.new(from_table: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = AST::FromTableNode.new(table_def: val[0], alias_name: nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_16(val, _values, result)
     result = AST::TableNode.new(name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_17(val, _values, result)
     result = AST::WhereClauseNode.new(predicate: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_18(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_19(val, _values, result)
     result = AST::ConditionNode.new(operator: :equals, left: val[0], right: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_20(val, _values, result)
    result = AST::ExpressionNode.new(value: val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SimplestSqlParser

# footerの内容はそのまま生成されたparser.tab.rbファイルの下にコピーされる。
# ruby parser.tab.rb で直にファイルを実行する際に Parserクラスを使って何かをするときなどに使える。
